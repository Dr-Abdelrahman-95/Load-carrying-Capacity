function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 28-Mar-2024 12:07:26.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx7 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0;0;0;0;0];
x1_step1.gain = [2;2;2;2;2;2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.1589319096012045129;-1.3898800899020753441;1.5030610645376571988;-0.66700623973212369577;-0.13307263601109048379;0.56465233941816228569;0.72883754977722514656;-0.5248776095359702909;-1.6760896820446833377;2.0148333439951802148];
IW1_1 = [1.7765820346780045735 -0.050008763722322435719 0.4726456362955340218 0.22310076418606072934 0.093172865135564039707 0.64763046894283471389 -0.12039507957148426476;0.52929462457699827382 0.11617971948354298417 -1.0068559311114659849 0.390296077070224956 0.90204885849057947489 -0.57525406684875002306 -1.1550301877278945639;-0.99149245856297585355 1.2460172984209751945 0.10920060301677891879 0.34792256383285719012 0.74314344589906566885 0.16912544939600626659 -0.81807916555664161873;0.64211880771142682001 -0.51359916097681734826 0.53454897577750926096 -0.53983977118125658912 0.24993961310387982633 0.38798614442529733015 1.2286226161297659765;-0.86357812181472770607 -1.2253639715957973522 -0.27690231009991617128 -0.16494801039146944621 0.32101503214726256896 -0.21415446910234714473 0.18304225051831804483;0.41196019724265825479 -0.1739851722391243527 -0.65748521382027769189 -1.0475867500410012134 1.033028923300790769 -0.72387021850645794085 -0.32803066676352687914;0.89397510302463190079 -0.3871594879839519443 0.042704094664195918485 -0.19741694680585086807 -0.41431789271130731178 -0.027315065051698866894 -1.5098269721876804716;-0.36376938270543524023 -0.34318153673541001991 -0.60595114244296433004 0.012729521325295464762 -1.7480071853733873954 -0.52516037137521909273 -0.71889030247373497673;-0.87584166348222147747 -0.037756008673114432872 -0.6207853893976924553 0.5510873579434872882 -0.26387766856410133087 -0.7803378249807880751 -0.8848463333778283646;0.30820207333570304176 -0.12273765672734442134 -0.0098004322628662023098 1.5280204816437144011 -0.24220450764626291762 1.2235936136242271388 -0.093681313767386836799];

% Layer 2
b2 = -0.90974334380611365791;
LW2_1 = [0.19593522431736892786 -0.14596037703162162424 0.18522676982776864474 -0.14429313965821549681 -0.14186615305063665637 -0.15031901369872002761 0.62844332593946472532 -0.29313375424982945905 -0.34149848754740375067 0.042316659697734668177];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
